/* 
   Operateur interactif de visualisation 2D et 3D
   et de specification de marqueurs

   Michel Couprie - decembre 1999

   Versions definies dans ce fichier:

     lclick2d : genere un tableau image labels au format pgm (long) - permet des labels differents
     lclicklist : genere une liste de points values
     lclick3d : idem lclicklist, avec 3 vues 
*/

#include <stdio.h>
#include <mcutil.h>
#include <mccodimage.h>
#include <mcimage.h>
#include <mcxbib.h>
#include <lclick.h>

/* ==================================== */
int lclick2d(struct xvimage *image, struct xvimage *lab, int zoom)
/* ==================================== */
{
  register int x;              /* index muet de pixel */
  int i, k;
  int rs = rowsize(image);     /* taille ligne */
  int cs = colsize(image);     /* taille colonne */
  int n = rs * cs;             /* taille plan */
  int d = depth(image);        /* nb. plans */
  int N = d * n;               /* taille image */
  unsigned char *SOURCE = UCHARDATA(image);      /* l'image de depart */
  unsigned long *LAB = ULONGDATA(lab);
  int curlab = 1;
  int incr = 0;
  int iplan = 0;
  int incrplan = 1;
#define NBBUTTONS 7
#define NBLIGBUTT 2
#define BOXWIDTH 70
#define BOXHEIGHT 20
  char * ButtonStrings[NBLIGBUTT][NBBUTTONS];
  int xx, yy;
  int BoxWidth = BOXWIDTH;
  int BoxHeight = BOXHEIGHT;
  int Height = cs + BoxHeight * NBLIGBUTT;
  int Width = rs;
  int ImageHeight = cs;
  int ImageWidth = rs;
  char *name1, *name;          /* pour les noms des images originale et resultat */
  int eventtype;

  if (zoom)
  {
    Height += cs;
    Width += rs;
    ImageHeight += cs;
    ImageWidth += rs;
  }

  if (BoxWidth * NBBUTTONS > Width) Width = BoxWidth * NBBUTTONS;
  
  InitColorGraphics(0, 0, /* x, y */
               Width, Height); /* w, h */

  for (i = 0; i < NBLIGBUTT; i++) 
    for (k = 0; k < NBBUTTONS; k++) 
      ButtonStrings[i][k] = (char *)malloc(16);

  strcpy(ButtonStrings[0][0], "LABEL");
  sprintf(ButtonStrings[0][1], "%d", curlab);
  strcpy(ButtonStrings[0][2], "  +  ");
  strcpy(ButtonStrings[0][3], "  -  ");
  strcpy(ButtonStrings[0][4], "INCR ");
  strcpy(ButtonStrings[0][5], "UNDO ");
  strcpy(ButtonStrings[0][6], "QUIT ");

  strcpy(ButtonStrings[1][0], " PLAN");
  sprintf(ButtonStrings[1][1], "%d", iplan);
  sprintf(ButtonStrings[1][2], " +%d", incrplan);
  sprintf(ButtonStrings[1][3], " -%d", incrplan);
  strcpy(ButtonStrings[1][4], "  ++ ");
  strcpy(ButtonStrings[1][5], "  -- ");
  strcpy(ButtonStrings[1][6], "     ");

/* ===========================================================
    affichage : 
   ===========================================================

    <------- rs ------>     
    ------------------- .
    |                 | .
    |                 | .
    |                 | .
    |      image      | cs
    |                 | .
    |                 | .
    |                 | .
    --------------------------------------------------
    |LABEL | 111  |  +   |  -   | AUTO | UNDO | QUIT |        BoxHeight
    --------------------------------------------------
    | PLAN | 111  | +1   | -1   |  ++  |  --  |      |        BoxHeight
    --------------------------------------------------
    <------>
    BoxWidth

*/

ReDisplayImage:

  /* send output to the screen */
  for (x = iplan * n; x < (iplan+1)*n; x++)
  {
    if (LAB[x])    
      Color(MC_RED);
    else
      Color(SOURCE[x]/4);
    if (zoom)
    {
      Point(2*((x%n)%rs), 2*((x%n)/rs));
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs));
      Point(2*((x%n)%rs), 2*((x%n)/rs)+1);
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs)+1);
    }
    else
      Point((x%n)%rs, (x%n)/rs);
  }

ReDisplay:

  ColToWhite();
  FRectangle(0, ImageHeight, BoxWidth * NBBUTTONS, BoxHeight * NBLIGBUTT);
  ColToBlack();

  for (i = 0; i < NBLIGBUTT; i++) 
  {
    Line(0, ImageHeight + i * BoxHeight, Width, ImageHeight + i * BoxHeight);
    for (k = 0; k < NBBUTTONS; k++) 
    {
      Line(k * BoxWidth, ImageHeight + i*BoxHeight, k*BoxWidth, ImageHeight + (i+1)*BoxHeight);
      String(k * BoxWidth + 3, ImageHeight + (i+1) * BoxHeight - 2, ButtonStrings[i][k]);
    }
  }

  FlushGraphics();  

NextEvent:
  eventtype = WaitEvent(&xx, &yy);
  switch(eventtype)
  {
    case KeyPress: 
      switch(xx)
      {
        case key_q: goto Terminate;
      }

    case ButtonPress:
    break;

    case ButtonRelease: goto NextEvent;

    case EnterNotify: goto ReDisplay;

    default: printf("type : %d ; x = %d ; y = %d\n", eventtype, xx, yy); break;

  } /* switch(eventtype) */

  if ((xx >= 0) && (yy >= 0) && (xx < ImageWidth) && (yy < ImageHeight))
  {
    if (zoom)
    {
      xx /= 2;
      yy /= 2;
    }
    x = iplan * n + yy * rs + xx;

    if (LAB[x]) 
    {
      LAB[x] = 0;
    }
    else
    {
      LAB[x] = curlab;
      if (incr) 
      {
        curlab++;
        sprintf(ButtonStrings[0][1], "%d", curlab);
      }
    }
    if (LAB[x])    
      Color(MC_RED);
    else
      Color(SOURCE[x]/4);
    if (zoom)
    {
      Point(2*((x%n)%rs), 2*((x%n)/rs));
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs));
      Point(2*((x%n)%rs), 2*((x%n)/rs)+1);
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs)+1);
    }
    else
      Point((x%n)%rs, (x%n)/rs);
    goto ReDisplay;
  }

  xx /= BoxWidth;
  yy -= ImageHeight;
  yy /= BoxHeight;

  switch(yy)
  {
    case 0: switch(xx)
            {
              case 0: break;
              case 1: break;
              case 2: curlab++;
                      sprintf(ButtonStrings[0][1], "%d", curlab);
                      break;
              case 3: curlab--;
                      if (curlab < 1) curlab = 1;
                      sprintf(ButtonStrings[0][1], "%d", curlab);
                      break;
              case 4: if (incr) 
                      {
                        incr = 0; 
                        sprintf(ButtonStrings[0][4], "%s", "INCR ");
		      }
                      else
		      { 
                        incr = 1;
                        sprintf(ButtonStrings[0][4], "%s", "IDEM ");
		      }
                      break;
              case 5: for (x = 0; x < N; x++) LAB[x] = 0;
                      goto ReDisplayImage;
              case 6: goto Terminate;
            } /* switch(xx) */
            break;
    case 1: switch(xx)
            {
              case 0: break;
              case 1: break;
              case 2: iplan++;
                      if (iplan > d-1) iplan = d-1;
                      sprintf(ButtonStrings[1][1], "%d", iplan);
                      goto ReDisplayImage;
              case 3: iplan--;
                      if (iplan < 0) iplan = 0;
                      sprintf(ButtonStrings[1][1], "%d", iplan);
                      goto ReDisplayImage;
              case 4: if (incrplan == 1) incrplan = 5; else incrplan += 5;
                      sprintf(ButtonStrings[1][2], " +%d", incrplan);
                      sprintf(ButtonStrings[1][3], " -%d", incrplan);
                      goto ReDisplayImage;
              case 5: if (incrplan == 5) incrplan = 1; else if (incrplan > 5) incrplan -= 5;
                      sprintf(ButtonStrings[1][2], " +%d", incrplan);
                      sprintf(ButtonStrings[1][3], " -%d", incrplan);
                      goto ReDisplayImage;
              case 6: break;
            } /* switch(xx) */
            break;
    default: goto ReDisplayImage;
  } /* switch(yy) */
  goto ReDisplay;

Terminate:
  TerminateGraphics();

  /* ---------------------------------------------------------- */
  /* fabrique le nom de l'image resultat */
  /* ---------------------------------------------------------- */

  name1 = image->name; 
  if (name1 == NULL) name1 = "?";
  name = (char *)malloc(strlen(name1) + strlen("click2d()") + 1);
  if (name == NULL)
  {   fprintf(stderr,"click2d() : malloc failed for name\n");
      return 0;
  }
  strcpy(name, "click2d(");
  strcat(name, name1);
  strcat(name, ")");
  if (name1 != NULL) free(lab->name);
  lab->name = name;

  return(1);
} /* lclick2d() */

/* ==================================== */
int lclicklist(struct xvimage *image, unsigned long *LAB, long *VLAB, int *nlabs, int zoom)
/* ==================================== */
{
  register int x;              /* index muet de pixel */
  int i, k;
  int rs = rowsize(image);     /* taille ligne */
  int cs = colsize(image);     /* taille colonne */
  int n = rs * cs;             /* taille plan */
  int d = depth(image);        /* nb. plans */
  int N = d * n;               /* taille image */
  unsigned char *SOURCE = UCHARDATA(image);      /* l'image de depart */
  int curlab = 1;
  int incr = 0;
  int iplan = 0;
  int incrplan = 1;
#define NBBUTTONS 7
#define NBLIGBUTT 2
#define BOXWIDTH 70
#define BOXHEIGHT 20
  char * ButtonStrings[NBLIGBUTT][NBBUTTONS];
  int xx, yy;
  int BoxWidth = BOXWIDTH;
  int BoxHeight = BOXHEIGHT;
  int Height = cs + BoxHeight * NBLIGBUTT;
  int Width = rs;
  int ImageHeight = cs;
  int ImageWidth = rs;
  char *name1, *name;          /* pour les noms des images originale et resultat */
  int eventtype;

  *nlabs = 0;

  if (zoom)
  {
    Height += cs;
    Width += rs;
    ImageHeight += cs;
    ImageWidth += rs;
  }

  if (BoxWidth * NBBUTTONS > Width) Width = BoxWidth * NBBUTTONS;
  
  InitColorGraphics(0, 0, /* x, y */
               Width, Height); /* w, h */

  for (i = 0; i < NBLIGBUTT; i++) 
    for (k = 0; k < NBBUTTONS; k++) 
      ButtonStrings[i][k] = (char *)malloc(16);

  strcpy(ButtonStrings[0][0], "LABEL");
  sprintf(ButtonStrings[0][1], "%d", curlab);
  strcpy(ButtonStrings[0][2], "  +  ");
  strcpy(ButtonStrings[0][3], "  -  ");
  strcpy(ButtonStrings[0][4], "INCR ");
  strcpy(ButtonStrings[0][5], "UNDO ");
  strcpy(ButtonStrings[0][6], "QUIT ");

  strcpy(ButtonStrings[1][0], " PLAN");
  sprintf(ButtonStrings[1][1], "%d", iplan);
  sprintf(ButtonStrings[1][2], " +%d", incrplan);
  sprintf(ButtonStrings[1][3], " -%d", incrplan);
  strcpy(ButtonStrings[1][4], "  ++ ");
  strcpy(ButtonStrings[1][5], "  -- ");
  strcpy(ButtonStrings[1][6], "     ");

/* ===========================================================
    affichage : 
   ===========================================================

    <------- rs ------>     
    ------------------- .
    |                 | .
    |                 | .
    |                 | .
    |      image      | cs
    |                 | .
    |                 | .
    |                 | .
    --------------------------------------------------
    |LABEL | 111  |  +   |  -   | AUTO | UNDO | QUIT |        BoxHeight
    --------------------------------------------------
    | PLAN | 111  | +1   | -1   |  ++  |  --  |      |        BoxHeight
    --------------------------------------------------
    <------>
    BoxWidth

*/

ReDisplayImage:

  /* send output to the screen */
  for (x = iplan * n; x < (iplan+1)*n; x++)
  {
    for (i = 0; i < *nlabs; i++) /* devient lourd s'il y a beaucoup de points ... */
      if (LAB[i] == x) break;
    if (i < *nlabs)
      Color(MC_RED);
    else
      Color(SOURCE[x]/4);
    if (zoom)
    {
      Point(2*((x%n)%rs), 2*((x%n)/rs));
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs));
      Point(2*((x%n)%rs), 2*((x%n)/rs)+1);
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs)+1);
    }
    else
      Point((x%n)%rs, (x%n)/rs);
  }

ReDisplay:

  ColToWhite();
  FRectangle(0, ImageHeight, BoxWidth * NBBUTTONS, BoxHeight * NBLIGBUTT);
  ColToBlack();

  for (i = 0; i < NBLIGBUTT; i++) 
  {
    Line(0, ImageHeight + i * BoxHeight, Width, ImageHeight + i * BoxHeight);
    for (k = 0; k < NBBUTTONS; k++) 
    {
      Line(k * BoxWidth, ImageHeight + i * BoxHeight, k * BoxWidth, ImageHeight + (i+1) * BoxHeight);
      String(k * BoxWidth + 3, ImageHeight + (i+1) * BoxHeight - 2, ButtonStrings[i][k]);
    }
  }

  FlushGraphics();  

NextEvent:
  eventtype = WaitEvent(&xx, &yy);
  switch(eventtype)
  {
    case KeyPress: 
      switch(xx)
      {
        case key_q: goto Terminate;
      }

    case ButtonPress:
    break;

    case ButtonRelease: goto NextEvent;

    case EnterNotify: goto ReDisplay;

    default: printf("type : %d ; x = %d ; y = %d\n", eventtype, xx, yy); break;

  } /* switch(eventtype) */

  if ((xx >= 0) && (yy >= 0) && (xx < ImageWidth) && (yy < ImageHeight))
  {
    if (zoom)
    {
      xx /= 2;
      yy /= 2;
    }
    x = iplan * n + yy * rs + xx;

    LAB[*nlabs] = x;
    VLAB[*nlabs] = curlab;
    if (incr) 
    {
      curlab++;
      sprintf(ButtonStrings[0][1], "%d", curlab);
    }
    *nlabs += 1;

    Color(MC_RED);
    if (zoom)
    {
      Point(2*((x%n)%rs), 2*((x%n)/rs));
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs));
      Point(2*((x%n)%rs), 2*((x%n)/rs)+1);
      Point(2*((x%n)%rs)+1, 2*((x%n)/rs)+1);
    }
    else
      Point((x%n)%rs, (x%n)/rs);
    goto ReDisplay;
  }

  xx /= BoxWidth;
  yy -= ImageHeight;
  yy /= BoxHeight;

  switch(yy)
  {
    case 0: switch(xx)
            {
              case 0: break;
              case 1: break;
              case 2: curlab++;
                      sprintf(ButtonStrings[0][1], "%d", curlab);
                      break;
              case 3: curlab--;
                      if (curlab < 1) curlab = 1;
                      sprintf(ButtonStrings[0][1], "%d", curlab);
                      break;
              case 4: if (incr) 
                      {
                        incr = 0; 
                        sprintf(ButtonStrings[0][4], "%s", "INCR ");
		      }
                      else
		      { 
                        incr = 1;
                        sprintf(ButtonStrings[0][4], "%s", "IDEM ");
		      }
                      break;
              case 5: *nlabs = 0;
                      goto ReDisplayImage;
              case 6: goto Terminate;
            } /* switch(xx) */
            break;
    case 1: switch(xx)
            {
              case 0: break;
              case 1: break;
              case 2: iplan += incrplan;
                      if (iplan > d-1) iplan = d-1;
                      sprintf(ButtonStrings[1][1], "%d", iplan);
                      goto ReDisplayImage;
              case 3: iplan -= incrplan;
                      if (iplan < 0) iplan = 0;
                      sprintf(ButtonStrings[1][1], "%d", iplan);
                      goto ReDisplayImage;
              case 4: if (incrplan == 1) incrplan = 5; else incrplan += 5;
                      sprintf(ButtonStrings[1][2], " +%d", incrplan);
                      sprintf(ButtonStrings[1][3], " -%d", incrplan);
                      goto ReDisplayImage;
              case 5: if (incrplan == 5) incrplan = 1; else if (incrplan > 5) incrplan -= 5;
                      sprintf(ButtonStrings[1][2], " +%d", incrplan);
                      sprintf(ButtonStrings[1][3], " -%d", incrplan);
                      goto ReDisplayImage;
              case 6: break;
            } /* switch(xx) */
            break;
    default: goto ReDisplayImage;
  } /* switch(yy) */
  goto ReDisplay;

Terminate:
  TerminateGraphics();

  return(1);
} /* lclicklist() */

/* ==================================== */
int lclick3d(struct xvimage *image, unsigned long *LAB, long *VLAB, int *nlabs, int zoom)
/* ==================================== */
{
  register int x, y, z;        /* index muet */
  int i, k;
  int rs = rowsize(image);     /* taille ligne */
  int cs = colsize(image);     /* taille colonne */
  int n = rs * cs;             /* taille plan */
  int d = depth(image);        /* nb. plans */
  int N = d * n;               /* taille image */
  unsigned char *SOURCE = UCHARDATA(image);      /* l'image de depart */
  int curlab = 1;
  int incr = 0;
  int incrplan = 1;
#define NBBUTTONS  7
#define NBLIGBUTT  2
#define BOXWIDTH  70
#define BOXHEIGHT 20
#define MARGE     10
  char * ButtonStrings[NBLIGBUTT][NBBUTTONS];
  int xx, yy;
  int xref = rs / 2;
  int yref = cs / 2;
  int zref = d / 2;
  int xclick = xref;
  int yclick = yref;
  int zclick = zref;
  char var = 'z';
  int eventtype;
  int spot = 1;
  char coordrefstring[128];
  char coordclickstring[128];
  char valclickstring[128];
  int BoxWidth = BOXWIDTH;
  int BoxHeight = BOXHEIGHT;
  /* dimensions totales */
  int Height = cs + MARGE + d + BoxHeight * NBLIGBUTT;
  int Width = rs + MARGE + d;
  /* dimensions du panneau image */
  int ImagePannelHeight = cs + MARGE + d;
  int ImagePannelWidth = rs + MARGE + d;
  /* dimensions image "centrale" */
  int ImageHeight = cs;
  int ImageWidth = rs;  
  /* dimensions image "droite" */
  int ImageRightWidth = d;  
  /* dimensions image "bas" */
  int ImageBottomHeight = d;

  char *name1, *name;          /* pour les noms des images originale et resultat */

  coordclickstring[0] = '\0';
  valclickstring[0] = '\0';

  *nlabs = 0;

  if (zoom)
  {
    Height += cs + d;
    Width += rs + d;
    ImagePannelHeight += cs + d;
    ImagePannelWidth += rs + d;
    ImageHeight += cs;
    ImageWidth += rs;
    ImageBottomHeight += d;
    ImageRightWidth += d;
  }

  if (BoxWidth * NBBUTTONS > Width) Width = BoxWidth * NBBUTTONS;
  
  InitColorGraphics(0, 0, /* x, y */
               Width, Height); /* w, h */

  for (i = 0; i < NBLIGBUTT; i++) 
    for (k = 0; k < NBBUTTONS; k++) 
      ButtonStrings[i][k] = (char *)malloc(16);

  strcpy(ButtonStrings[0][0], "LABEL");
  sprintf(ButtonStrings[0][1], "%d", curlab);
  strcpy(ButtonStrings[0][2], "  +  ");
  strcpy(ButtonStrings[0][3], "  -  ");
  strcpy(ButtonStrings[0][4], "INCR ");
  strcpy(ButtonStrings[0][5], "UNDO ");
  strcpy(ButtonStrings[0][6], "QUIT ");

  sprintf(ButtonStrings[1][0], "  %c ", 'z');
  sprintf(ButtonStrings[1][1], "%d", zref);
  sprintf(ButtonStrings[1][2], " +%d", incrplan);
  sprintf(ButtonStrings[1][3], " -%d", incrplan);
  strcpy(ButtonStrings[1][4], "  ++ ");
  strcpy(ButtonStrings[1][5], "  -- ");
  strcpy(ButtonStrings[1][6], "SPOT ");

/* ===========================================================
    affichage : 
   ===========================================================

    <------- rs ------>      <---- d ---->
    ------------------- ^    -------------
    |                 | .    |           |
    |                 | .    |           |
    |                 | .    |           |
    |      image      | cs   |           |
    |                 | .    |           |
    |                 | .    |           |
    |                 | .    |           |
    ------------------- v    -------------
    ------------------- ^
    |                 | .     1,2,3
    |                 | d
    |                 | .
    |                 | .
    ------------------- v  
    --------------------------------------------------
    |LABEL | 111  |  +   |  -   | AUTO | UNDO | QUIT |        BoxHeight
    --------------------------------------------------
    |  z   | 111  | +1   | -1   |  ++  |  --  | SPOT |        BoxHeight
    --------------------------------------------------
    <------>
    BoxWidth

*/

ReDisplayImage:

  /* send output to the screen */

  /* ================================================================= */
  /* image "centrale" (projection x,y) */
  /* ================================================================= */
  if (zoom)
  {
    for (y = 0; y < cs; y++) for (x = 0; x < rs; x++)
    {
      Color(SOURCE[zref * n + y * rs + x]/4);
      Rectangle(2*x, 2*y, 1, 1);
    }
  } /* if (zoom) */
  else
    for (y = 0; y < cs; y++) for (x = 0; x < rs; x++)
    {
      Color(SOURCE[zref * n + y * rs + x]/4);
      Point(x, y);
    }

  Color(MC_RED);
  x = xref;
  if (var == 'x')
  {
    if (zoom)
    {
      for (y = 0; y < cs; y++)
        Rectangle(2*x, 2*y, 1, 1);
    } /* if (zoom) */
    else
      for (y = 0; y < cs; y++)
        Point(x, y);
  } /* if (var == 'x') */
  else
  {
    if (zoom)
    {
      for (y = 0; y < 5; y++) Rectangle(2*x, 2*y, 1, 1);
      for (y = cs - 5; y < cs; y++) Rectangle(2*x, 2*y, 1, 1);
    } /* if (zoom) */
    else
    {
      for (y = 0; y < 5; y++) Point(x, y);
      for (y = cs - 5; y < cs; y++) Point(x, y);
    }
  } /* else if (var == 'x') */

  y = yref;
  if (var == 'y')
  {
    if (zoom)
    {
      for (x = 0; x < rs; x++)
        Rectangle(2*x, 2*y, 1, 1);
    } /* if (zoom) */
    else
      for (x = 0; x < rs; x++)
        Point(x, y);
  } /* if (var == 'x') */
  else
  {
    if (zoom)
    {
      for (x = 0; x < 5; x++) Rectangle(2*x, 2*y, 1, 1);
      for (x = rs - 5; x < rs; x++) Rectangle(2*x, 2*y, 1, 1);
    } /* if (zoom) */
    else
    {
      for (x = 0; x < 5; x++) Point(x, y);
      for (x = rs - 5; x < rs; x++) Point(x, y);
    }
  } /* else if (var == 'y') */

  Color(MC_GREEN);
  for (i = 0; i < *nlabs; i++) 
    if (LAB[i] / n == zref)
    {
      if (zoom)
        Rectangle(2*(LAB[i]%rs), 2*((LAB[i]%n)/rs), 1, 1);
      else
        Point((LAB[i]%rs), ((LAB[i]%n)/rs));
    }

  if (spot)
  {
    if (zoom)
    {
      Rectangle(2*xref - 10, 2 * yref, 20, 1);
      Rectangle(2*xref, 2 * yref - 10, 1, 20);
    }
    else
    {
      Line(xref - 5, yref, xref + 5, yref);
      Line(xref, yref - 5, xref, yref + 5);
    }
  }

  /* ================================================================= */
  /* image droite (projection y,z) */
  /* ================================================================= */
  if (zoom)
  {
    for (y = 0; y < cs; y++) for (z = 0; z < d; z++)
    {
      Color(SOURCE[z * n + y * rs + xref]/4);
      Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
    }
  } /* if (zoom) */
  else
    for (y = 0; y < cs; y++) for (z = 0; z < d; z++)
    {
      Point(ImageWidth + MARGE + z, y);
      Color(SOURCE[z * n + y * rs + xref]/4);
    }

  Color(MC_RED);
  z = zref;
  if (var == 'z')
  {
    if (zoom)
    {
      for (y = 0; y < cs; y++)
        Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
    } /* if (zoom) */
    else
      for (y = 0; y < cs; y++)
        Point(ImageWidth + MARGE + z, y);
  } /* if (var == 'z') */
  else
  {
    if (zoom)
    {
      for (y = 0; y < 5; y++) Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
      for (y = cs - 5; y < cs; y++) Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
    } /* if (zoom) */
    else
    {
      for (y = 0; y < 5; y++) Point(ImageWidth + MARGE + z, y);
      for (y = cs - 5; y < cs; y++) Point(ImageWidth + MARGE + z, y);
    }
  } /* else if (var == 'z') */

  y = yref;
  if (var == 'y')
  {
    if (zoom)
    {
      for (z = 0; z < d; z++)
        Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
    } /* if (zoom) */
    else
    {
      for (z = 0; z < d; z++)
        Point(ImageWidth + MARGE + z, y);
    }
  } /* if (var == 'y') */
  else
  {
    if (zoom)
    {
      for (z = 0; z < 5; z++) Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
      for (z = d-5; z < d; z++) Rectangle(ImageWidth + MARGE + 2*z, 2*y, 1, 1);
    } /* if (zoom) */
    else
    {
      for (z = 0; z < 5; z++) Point(ImageWidth + MARGE + z, y);
      for (z = d-5; z < d; z++) Point(ImageWidth + MARGE + z, y);
    }
  } /* else if (var == 'y') */

  Color(MC_GREEN);
  for (i = 0; i < *nlabs; i++) 
    if (LAB[i] % rs == xref)
    {
      if (zoom)
        Rectangle(ImageWidth + MARGE + 2*(LAB[i]/n), 2*((LAB[i]%n)/rs), 1, 1);
      else
        Point(ImageWidth + MARGE + (LAB[i]/n), ((LAB[i]%n)/rs));
    }

  if (spot)
  {
    if (zoom)
    {
      Rectangle(ImageWidth + MARGE + 2*zref - 10, 2 * yref, 20, 1);
      Rectangle(ImageWidth + MARGE + 2*zref, 2 * yref - 10, 1, 20);
    }
    else
    {
      Line(ImageWidth + MARGE + zref - 5, yref, ImageWidth + MARGE + zref + 5, yref);
      Line(ImageWidth + MARGE + zref, yref - 5, ImageWidth + MARGE + zref, yref + 5);
    }
  }

  /* ================================================================= */
  /* image bas (projection x,z) */
  /* ================================================================= */
  if (zoom)
  {
    for (x = 0; x < rs; x++) for (z = 0; z < d; z++)
    {
      Color(SOURCE[z * n + yref * rs + x]/4);
      Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
    }
  } /* if (zoom) */
  else
    for (x = 0; x < rs; x++) for (z = 0; z < d; z++)
    {
      Color(SOURCE[z * n + yref * rs + x]/4);
      Point(x, ImageHeight + MARGE + z);
    }

  Color(MC_RED);
  x = xref;
  if (var == 'x')
  {
    if (zoom)
    {
      for (z = 0; z < d; z++) Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
    } /* if (zoom) */
    else
    {
      for (z = 0; z < d; z++) Point(x, ImageHeight + MARGE + z);
    }
  } /* if (var == 'x') */
  else
  {
    if (zoom)
    {
      for (z = 0; z < 5; z++) Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
      for (z = d-5; z < d; z++) Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
    } /* if (zoom) */
    else
    {
      for (z = 0; z < 5; z++) Point(x, ImageHeight + MARGE + z);
      for (z = d-5; z < d; z++) Point(x, ImageHeight + MARGE + z);
    }
  } /* else if (var == 'x') */

  z = zref;
  if (var == 'z')
  {
    if (zoom)
    {
      for (x = 0; x < rs; x++) Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
    } /* if (zoom) */
    else
    {
      for (x = 0; x < rs; x++) Point(x, ImageHeight + MARGE + z);
    }
  } /* if (var == 'z') */
  else
  {
    if (zoom)
    {
      for (x = 0; x < 5; x++) Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
      for (x = rs-5; x < rs; x++) Rectangle(2*x, ImageHeight + MARGE + 2*z, 1, 1);
    } /* if (zoom) */
    else
    {
      for (x = 0; x < 5; x++) Point(x, ImageHeight + MARGE + z);
      for (x = rs-5; x < rs; x++) Point(x, ImageHeight + MARGE + z);
    }
  } /* else if (var == 'z') */

  Color(MC_GREEN);
  for (i = 0; i < *nlabs; i++) 
    if ((LAB[i] % n) / rs == yref)
    {
      if (zoom)
        Rectangle(2*(LAB[i]%rs), ImageHeight + MARGE + 2*(LAB[i]/n), 1, 1);
      else
        Point((LAB[i]%rs), ImageHeight + MARGE + (LAB[i]/n));
    }

  if (spot)
  {
    if (zoom)
    {
      Rectangle(2*xref - 10, ImageHeight + MARGE + 2 * zref, 20, 1);
      Rectangle(2*xref, ImageHeight + MARGE + 2 * zref - 10, 1, 20);
    }
    else
    {
      Line(xref - 5, ImageHeight + MARGE + zref, xref + 5, ImageHeight + MARGE + zref);
      Line(xref, ImageHeight + MARGE + zref - 5, xref, ImageHeight + MARGE + zref + 5);
    }
  }

  ColToBlack();
  FRectangle(ImageWidth, ImageHeight, 
    max(ImagePannelWidth,Width) - ImageWidth, ImagePannelHeight - ImageHeight);
  ColToWhite();
  sprintf(coordrefstring, "%d,%d,%d", xref, yref, zref);
  String(ImageWidth + 2 * MARGE, ImageHeight + BoxHeight + MARGE, coordrefstring);
  String(ImageWidth + 2 * MARGE, ImageHeight+(2*BoxHeight) + MARGE, coordclickstring);
  String(ImageWidth + 2 * MARGE, ImageHeight+(3*BoxHeight) + MARGE, valclickstring);

  /* ================================================================= */
  /* ================================================================= */
ReDisplay:
  /* ================================================================= */
  /* ================================================================= */

  ColToWhite();
  FRectangle(0, ImagePannelHeight, BoxWidth * NBBUTTONS, BoxHeight * NBLIGBUTT);
  ColToBlack();

  for (i = 0; i < NBLIGBUTT; i++) 
  {
    Line(0, ImagePannelHeight + i * BoxHeight, Width, ImagePannelHeight + i * BoxHeight);
    for (k = 0; k < NBBUTTONS; k++) 
    {
      Line(k * BoxWidth, ImagePannelHeight + i * BoxHeight, k * BoxWidth, ImagePannelHeight + (i+1) * BoxHeight);
      String(k * BoxWidth + 3, ImagePannelHeight + (i+1) * BoxHeight - 2, ButtonStrings[i][k]);
    }
  }

  FlushGraphics();  

NextEvent:
  eventtype = WaitEvent(&xx, &yy);
  switch(eventtype)
  {
    case KeyPress: 
      switch(xx)
      {
        case key_q: goto Terminate;
        case key_r: xref = xclick; yref = yclick; zref = zclick; goto ReDisplayImage;
        case key_x: 
           var = 'x'; 
           sprintf(ButtonStrings[1][0], "  %c ", var);
           sprintf(ButtonStrings[1][1], "%d", xref);
           goto ReDisplayImage;
        case key_y: 
           var = 'y'; 
           sprintf(ButtonStrings[1][0], "  %c ", var);
           sprintf(ButtonStrings[1][1], "%d", yref);
           goto ReDisplayImage;
        case key_z: 
           var = 'z'; 
           sprintf(ButtonStrings[1][0], "  %c ", var);
           sprintf(ButtonStrings[1][1], "%d", zref);
           goto ReDisplayImage;
        case left:
        case Left:
           switch (var)
	   {
             case 'x': zref--; break;
             case 'y': xref--; break;
             case 'z': xref--; break;
	   }
           goto ReDisplayImage;
        case right:
        case Right:
           switch (var)
	   {
             case 'x': zref++; break;
             case 'y': xref++; break;
             case 'z': xref++; break;
	   }
           goto ReDisplayImage;
        case up:
        case Up:
           switch (var)
	   {
             case 'x': yref--; break;
             case 'y': zref--; break;
             case 'z': yref--; break;
	   }
           goto ReDisplayImage;
        case Down:
        case down:
           switch (var)
	   {
             case 'x': yref++; break;
             case 'y': zref++; break;
             case 'z': yref++; break;
	   }
           goto ReDisplayImage;
      }

    case ButtonPress:
    break;

    case ButtonRelease: goto NextEvent;

    case EnterNotify: goto ReDisplay;

    default: printf("type : %d ; x = %d ; y = %d\n", eventtype, xx, yy); break;

  } /* switch(eventtype) */

  if ((xx >= 0) && (yy >= 0) && (xx < ImageWidth) && (yy < ImageHeight))
  {  /* click dans l'image "principale" */
    if (zoom)
    {
      xx /= 2;
      yy /= 2;
    }
    xclick = xx; yclick = yy; zclick = zref;  
    x = zclick * n + yclick * rs + xclick;
    sprintf(coordclickstring, "%d,%d,%d", xclick, yclick, zclick);
    sprintf(valclickstring, "%d", SOURCE[x]);
    
    goto ReDisplayImage;
  } /* if ((xx >= 0) && (yy >= 0) && (xx < ImageWidth) && (yy < ImageHeight)) */
  else
  if ((xx >= ImageWidth+MARGE) && (yy >= 0) && 
      (xx < ImageWidth+MARGE+ImageRightWidth) && (yy < ImageHeight))
  {  /* click dans l'image "droite" */
    xx -= (ImageWidth+MARGE);
    if (zoom)
    {
      xx /= 2;
      yy /= 2;
    }
    xclick = xref; yclick = yy; zclick = xx;  
    x = zclick * n + yclick * rs + xclick;
    sprintf(coordclickstring, "%d,%d,%d", xclick, yclick, zclick);
    sprintf(valclickstring, "%d", SOURCE[x]);
    
    goto ReDisplayImage;
  }
  else
  if ((xx >= 0) && (yy >= ImageHeight+MARGE) && 
      (xx < ImageWidth) && (yy < ImageHeight+MARGE+ImageBottomHeight))
  {  /* click dans l'image "bas" */
    yy -= (ImageHeight+MARGE);
    if (zoom)
    {
      xx /= 2;
      yy /= 2;
    }
    xclick = xx; yclick = yref; zclick = yy;  
    x = zclick * n + yclick * rs + xclick;
    sprintf(coordclickstring, "%d,%d,%d", xclick, yclick, zclick);
    sprintf(valclickstring, "%d", SOURCE[x]);
    
    goto ReDisplayImage;
  }

  if ((xx >= 0) && (yy >= 0) && (xx < ImagePannelWidth) && (yy < ImagePannelHeight))
    goto ReDisplayImage;

  xx /= BoxWidth;
  yy -= ImagePannelHeight;
  yy /= BoxHeight;

  switch(yy)
  {
    case 0: switch(xx)
            {
              case 0: LAB[*nlabs] = zref * n + yref * rs + xref;
                      VLAB[*nlabs] = curlab;
                      *nlabs += 1;
                      if (incr)
                      {
                        curlab++;
                        sprintf(ButtonStrings[0][1], "%d", curlab);
                        goto ReDisplay;
                      }
                      break;
              case 1: break;
              case 2: curlab++;
                      sprintf(ButtonStrings[0][1], "%d", curlab);
                      break;
              case 3: curlab--;
                      if (curlab < 1) curlab = 1;
                      sprintf(ButtonStrings[0][1], "%d", curlab);
                      break;
              case 4: if (incr) 
                      {
                        incr = 0; 
                        sprintf(ButtonStrings[0][4], "%s", "INCR ");
		      }
                      else
		      { 
                        incr = 1;
                        sprintf(ButtonStrings[0][4], "%s", "IDEM ");
		      }
                      break;
              case 5: *nlabs = 0;
                      goto ReDisplayImage;
              case 6: goto Terminate;
            } /* switch(xx) */
            break;
    case 1: switch(xx)
            {
              case 0: if (var == 'x') var = 'y'; 
                      else if (var == 'y') var = 'z'; 
                      else if (var == 'z') var = 'x'; 
                      sprintf(ButtonStrings[1][0], "  %c ", var);
                      if (var == 'x') 
                        sprintf(ButtonStrings[1][1], "%d", xref);
		      else if (var == 'y') 
                        sprintf(ButtonStrings[1][1], "%d", yref);
		      else if (var == 'z') 
                        sprintf(ButtonStrings[1][1], "%d", zref);
                      goto ReDisplayImage;
              case 1: break;
              case 2: if (var == 'x') 
                      {
                        xref += incrplan;
                        if (xref > rs-1) xref = rs-1;
                        sprintf(ButtonStrings[1][1], "%d", xref);
		      } else
                      if (var == 'y') 
                      {
                        yref += incrplan;
                        if (yref > cs-1) yref = cs-1;
                        sprintf(ButtonStrings[1][1], "%d", yref);
		      } else
                      if (var == 'z') 
                      {
                        zref += incrplan;
                        if (zref > d-1) zref = d-1;
                        sprintf(ButtonStrings[1][1], "%d", zref);
		      }
                      goto ReDisplayImage;
              case 3: if (var == 'x') 
                      {
                        xref -= incrplan;
                        if (xref < 0) xref = 0;
                        sprintf(ButtonStrings[1][1], "%d", xref);
		      } else
                      if (var == 'y') 
                      {
                        yref -= incrplan;
                        if (yref < 0) yref = 0;
                        sprintf(ButtonStrings[1][1], "%d", yref);
		      } else
                      if (var == 'z') 
                      {
                        zref -= incrplan;
                        if (zref < 0) zref = 0;
                        sprintf(ButtonStrings[1][1], "%d", zref);
		      }
                      goto ReDisplayImage;
              case 4: if (incrplan == 1) incrplan = 5; else incrplan += 5;
                      sprintf(ButtonStrings[1][2], " +%d", incrplan);
                      sprintf(ButtonStrings[1][3], " -%d", incrplan);
                      goto ReDisplay;
              case 5: if (incrplan == 5) incrplan = 1; else if (incrplan > 5) incrplan -= 5;
                      sprintf(ButtonStrings[1][2], " +%d", incrplan);
                      sprintf(ButtonStrings[1][3], " -%d", incrplan);
                      goto ReDisplay;
              case 6: if (spot) spot = 0; else spot = 1;
                      goto ReDisplayImage;
            } /* switch(xx) */
            break;
    default: goto ReDisplayImage;
  } /* switch(yy) */
  goto ReDisplay;

Terminate:
  TerminateGraphics();

  return(1);
} /* lclick3d() */
