# Copyright ESIEE (2009) 
#
# m.couprie@esiee.fr
#
# This software is an image processing library whose purpose is to be
# used primarily for research and teaching.
#
# This software is governed by the CeCILL  license under French law and
# abiding by the rules of distribution of free software. You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.
#
#sh
# The next line is executed by /bin/sh, but not Tcl \
exec vtk $0 $1 $2 $3 $4 $5 $6 $7

# A renderer for label images - Michel Couprie 2011
package require vtk
package require vtkinteraction

# set window title
wm title . "Renderer for label images"

# get input image file name as first argument
if {$argc != 1} { 
  puts stderr "usage: render in"
  exit 
}

set PINK "$env(PINK)"
source "$PINK/tcl/my_exec.tcl"
source "$PINK/tcl/my_write.tcl"
source "$PINK/tcl/my_read.tcl"
source "$PINK/tcl/my_dialog.tcl"

proc my_read_val {filename} {
  set input [open $filename]
  set tag [gets $input]
  set line [gets $input]
  scan $line "%g" v1
  close $input
  return $v1
}

# ============================================================
# GLOBAL VARIABLES
# ============================================================

 global RENDER
 # infilename  : input file name
 # rs : row size
 # cs : col size
 set RENDER(name) "labelrender"
 set RENDER(infilename) [lindex $argv 0]
 set RENDER(rs) 600
 set RENDER(cs) 600
 set RENDER(active) 0
 set RENDER(opacity) 1.0
 set RENDER(label) 0
 set RENDER(wireframe) 0
 set RENDER(indexframe) 0
 set RENDER(nblab) 1

# white (for any label)
 set RENDER_COL0 "1.0 1.0 1.0"
# red (for highlighted label)
 set RENDER_COL1 "1.0 0.0 0.0"

# create renderer and window
vtkRenderer ren1
    ren1 SetViewport 0 0 1 1
# fond gris clair:
#    ren1 SetBackground 0.8 0.8 0.8
# fond gris blanc:
    ren1 SetBackground 1.0 1.0 1.0
# pour un gradient: nouvelle version VTK ?
#    ren1 SetBackground2 1 1 1
# fond blanc:
#    ren1 SetBackground 1 1 1
# fond bleu:
#    ren1 SetBackground 0 0 0.7
vtkRenderWindow renWin
    renWin AddRenderer ren1 
vtkRenderWindowInteractor iren
    iren SetRenderWindow renWin
vtkInteractorStyleTrackballCamera style
    iren SetInteractorStyle style

# global image (all labels)
my_exec_f threshold $RENDER(infilename) 1 "/tmp/$RENDER(name)_bin"

# counts the number of labels
my_exec_f max1 $RENDER(infilename) "/tmp/$RENDER(name)_max1"
set RENDER(nblab) [my_read_val "/tmp/$RENDER(name)_max1"]

# the initial current (highlighted) object is empty
my_exec_f threshold $RENDER(infilename) [expr $RENDER(nblab)+1] "/tmp/$RENDER(name)_curlab" 

# CHARGEMENT DES DIFFERENTES GEOMETRIES
# pour l'objet total (union des labels)
  vtkPolyDataReader obj0
  obj0 SetFileName "/tmp/$RENDER(name)_bin"
  vtkPolyDataNormals normals0
  normals0 SetInput [obj0 GetOutput]
  normals0 FlipNormalsOn
  vtkPolyDataMapper objMapper0
  objMapper0 SetInput [normals0 GetOutput]
  vtkActor objActor0
  objActor0 SetMapper objMapper0
  eval [objActor0 GetProperty] SetColor $RENDER_COL0
  ren1 AddProp objActor0

# pour l'objet courant (celui dont le label est sélectionné)
  vtkPolyDataReader obj1
  obj1 SetFileName "/tmp/$RENDER(name)_curlab" 
  vtkPolyDataNormals normals1
  normals1 SetInput [obj1 GetOutput]
  normals1 FlipNormalsOn
  vtkPolyDataMapper objMapper1
  objMapper1 SetInput [normals1 GetOutput]
  vtkActor objActor1
  objActor1 SetMapper objMapper1
  eval [objActor1 GetProperty] SetColor $RENDER_COL1
  ren1 AddProp objActor1

set cam1 [ren1 GetActiveCamera]
$cam1 ParallelProjectionOff

ren1 ResetCamera

# then binds rendering window to a tk widget
set vtkw [vtkTkRenderWidget .ren \
        -width $RENDER(rs) \
        -height $RENDER(cs) \
        -rw renWin]
BindTkRenderWidget $vtkw

# command zone
frame .commands
frame .buttons
set quitbutton [button .buttons.quit -text "Quit" -command RENDER_bye\
                -activebackground white]
set savebutton [button .buttons.save -text "Save" -command RENDER_savepng\
                -activebackground white]
# what to do in case of window closing:
wm protocol . WM_DELETE_WINDOW RENDER_bye
bind . "q" RENDER_bye

set wirebutton [checkbutton .commands.wire -text "Wireframe" \
                -variable RENDER(wireframe) -command RENDER_togglewire\
                -activebackground white]
set setlabel [scale .commands.setlabel \
        -from 0 -to 10 -res 1 \
        -orient horizontal \
        -label "Label" \
	-variable RENDER(label) \
        -command RENDER_setLabel]
set opacity [scale .commands.opacity \
        -from 0.0 -to 1.0 -res 0.1 \
        -orient horizontal \
        -label "Opacity" \
	-variable RENDER(opacity) \
        -command RENDER_setOpacity]

proc RENDER_setOpacity {opa} {
  global RENDER
  global objActor0
  eval [objActor0 GetProperty] SetOpacity $opa
  renWin Render
  set RENDER(opacity) $opa
}

proc RENDER_setLabel {curlab} {
  global RENDER
  global obj1
  set RENDER(label) $curlab
  my_exec_q selndg $RENDER(infilename) $RENDER(label) $RENDER(label) "/tmp/$RENDER(name)_curlab"  
  renWin Render
}

set saveposbutton [button .buttons.savepos -text "Savepos" -command RENDER_savepos\
                -activebackground white]
set setposbutton [button .buttons.setpos -text "SetPos" -command RENDER_setpos\
                -activebackground white]

pack $quitbutton -side right
pack $savebutton -side left
pack $saveposbutton -side left
pack $setposbutton -side left
pack $setlabel -side left
pack $wirebutton -side left
pack $opacity .buttons -side top -anchor nw -fill both
pack $vtkw .commands -side top -fill both -expand yes

proc RENDER_savepos {} {
  global ren1
  set pos [[ren1 GetActiveCamera] GetPosition]
  set foc [[ren1 GetActiveCamera] GetFocalPoint]
  set vup [[ren1 GetActiveCamera] GetViewUp]
  set sca [[ren1 GetActiveCamera] GetParallelScale]
  my_write_text "_labelrender_coord_camera" "$pos\n$foc\n$vup\n$sca"
}

proc RENDER_setpos {} {
  global ren1
  global renWin
  set pos [my_read_text "_labelrender_coord_camera"]
  [ren1 GetActiveCamera] SetPosition [lindex $pos 0] [lindex $pos 1] [lindex $pos 2]
  [ren1 GetActiveCamera] SetFocalPoint [lindex $pos 3] [lindex $pos 4] [lindex $pos 5]
  [ren1 GetActiveCamera] SetViewUp [lindex $pos 6] [lindex $pos 7] [lindex $pos 8]
  [ren1 GetActiveCamera] SetParallelScale [lindex $pos 9]
  renWin Render
}

proc RENDER_bye {} {
    vtkCommand DeleteAllObjects
    exit
}

proc RENDER_togglewire {} {
  global RENDER
  global RENDER_WFR
  set a $RENDER(active)
  global objActor$a
  if ($RENDER(wireframe)) {
    eval [objActor$a GetProperty] SetRepresentationToWireframe
  } else {
    eval [objActor$a GetProperty] SetRepresentationToSurface
  }
  renWin Render
  set RENDER_WFR($a) $RENDER(wireframe)
}

proc RENDER_savepng {} {
  global RENDER
  set i $RENDER(indexframe)
  set ii [format "%04d" $i]
  vtkWindowToImageFilter w2i$i
  w2i$i SetInput renWin

  vtkPNGWriter writer$i
  writer$i SetInput [w2i$i GetOutput]
  writer$i SetFileName "render_save$ii.png"
  writer$i Write
  set RENDER(indexframe) [expr $i+1]
}
